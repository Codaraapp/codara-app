generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], map: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], map: "auth_group_permissions_permission_id_84c5c92e")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], map: "auth_permission_content_type_id_2f476e4b")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.Timestamptz(6)
  is_superuser               Boolean
  username                   String                       @unique @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.Timestamptz(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]

  @@index([username], map: "auth_user_username_6821ab7c_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

  @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], map: "auth_user_groups_group_id_97559544")
  @@index([user_id], map: "auth_user_groups_user_id_6a12ed8b")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

  @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], map: "auth_user_user_permissions_permission_id_1fbb5f2c")
  @@index([user_id], map: "auth_user_user_permissions_user_id_a95ead1b")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
  @@index([session_key], map: "django_session_session_key_c0390e0f_like")
}

model organization_types {
  id    String  @id @db.VarChar(20)
  name  String  @db.VarChar(25)
  users users[]

  @@index([id], map: "organization_types_id_8f5c5376_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model users {
  id                   String              @id(map: "user_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_surname         String              @db.VarChar(90)
  email                String              @unique(map: "users_email_0ea73cca_uniq") @db.VarChar(60)
  provider             String              @unique(map: "users_provider_52d6686a_uniq") @db.VarChar(10)
  sso_id               String              @db.VarChar(150)
  create_at            DateTime            @db.Timestamptz(6)
  update_at            DateTime            @db.Timestamptz(6)
  avatar_img_url       String?             @db.VarChar(250)
  is_complete          Boolean
  organization_name    String?             @db.VarChar(30)
  organization_type_id String?             @db.VarChar(20)
  projects             projects[]
  organization_types   organization_types? @relation(fields: [organization_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_organization_type_id_da21f767_fk")

  @@unique([email, provider], map: "users_email_provider_783302dd_uniq")
  @@index([organization_type_id], map: "users_organization_type_id_da21f767")
  @@index([organization_type_id], map: "users_organization_type_id_da21f767_like")
  @@index([email], map: "users_email_0ea73cca_like")
  @@index([provider], map: "users_provider_52d6686a_like")
}

model events {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String?    @db.VarChar(200)
  decription String?
  start_date DateTime   @db.Timestamptz(6)
  is_active  Boolean
  projects   projects[]
}

model project_status {
  project_status_code String     @id @db.VarChar(20)
  project_status_name String     @db.VarChar(25)
  projects            projects[]

  @@index([project_status_code], map: "project_status_project_status_code_d52bfe30_like")
}

model project_types {
  project_type_code String     @id @db.VarChar(20)
  project_type_name String     @db.VarChar(25)
  projects          projects[]

  @@index([project_type_code], map: "project_types_project_type_code_1c2ec91d_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model projects {
  id                 String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String         @db.VarChar(90)
  desription         String?
  prize_pool         Decimal        @db.Decimal(16, 4)
  create_at          DateTime       @db.Timestamptz(6)
  is_connect_repo    Boolean
  is_connect_deposit Boolean
  repo_name          String?        @db.VarChar(30)
  project_status_id  String         @db.VarChar(20)
  project_type_id    String         @db.VarChar(20)
  user_id            String         @db.Uuid
  event_id           String?        @db.Uuid
  events             events?        @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "projects_event_id_a036eddb_fk_events_id")
  project_status     project_status @relation(fields: [project_status_id], references: [project_status_code], onDelete: NoAction, onUpdate: NoAction, map: "projects_project_status_id_16631424_fk")
  project_types      project_types  @relation(fields: [project_type_id], references: [project_type_code], onDelete: NoAction, onUpdate: NoAction, map: "projects_project_type_id_a5b2ba49_fk_project_t")
  users              users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "projects_user_id_155ff78a_fk_users_id")

  @@index([event_id], map: "projects_event_id_a036eddb")
  @@index([project_status_id], map: "projects_project_status_id_16631424")
  @@index([project_status_id], map: "projects_project_status_id_16631424_like")
  @@index([project_type_id], map: "projects_project_type_id_a5b2ba49")
  @@index([project_type_id], map: "projects_project_type_id_a5b2ba49_like")
  @@index([user_id], map: "projects_user_id_155ff78a")
}
